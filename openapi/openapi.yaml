openapi: "3.0.0"
info:
  version: 1.0.0
  title: Go MS Demo
  description: A sample Go MS to demonstrate GO/OpenAPI 3.0 integration
  termsOfService: http://swagger.io/terms/
  contact:
    name: macolomb
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:1321/api
paths:
  /users:
    get:
      description: |
        Returns all users of the system
      operationId: findUsers
      parameters:
        - name: names
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new user in the in the system
      operationId: addUser
      requestBody:
        description: User to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseUser'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{id}:
    get:
      description: Returns a user based on a single ID, if present
      operationId: find user by id
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/BaseUser'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64

    BaseUser:
      type: object
      required:
        - name
        - surname
      properties:
        name:
          type: string
        surname:
          type: string
        tag:
          type: string    

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
